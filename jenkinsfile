def groovyScript

pipeline {
    agent any 
    environment { 
        PIPELINE_NAME = "Jenkins Test Pipeline"
    }
    parameters {
        string(name: 'MESSAGE', defaultValue: 'Hello World', description: 'Message to be displayed in the web page')
        choice(name: 'VERSION', choices: [ '1.0', '2.0'] , description: 'Version of the build')
        booleanParam(name: 'displayVersion', defaultValue: true, description: 'Display version or not')
    }
    stages {
        stage('Pipleline Initialization') { 
            steps {
                echo "Initializing the project."
                script {
                    groovyScript = load "script.groovy"
                    groovyScript.initMessage()
                }
            }
        }

        stage('Building HTML page') { 
            steps {
                sh "echo '${MESSAGE}' > index.html"
            }
        }

        stage('Selecting the Version') { 
            when {
                expression {
                    params.displayVersion 
                }
            }
            steps {
                script {
                    if (params.VERSION == "1.0" ) {
                    sh "echo ' | Test is: ${VERSION}' >> index.html"        
                    }
                    else if (params.VERSION == "2.0" ) {
                        sh "echo ' | Build is: ${VERSION}' >> index.html"        
                    }
                }
                
            }
        }

        stage('Building Docker Image') { 
            when {
                expression {
                    params.VERSION == '1.0'
                }
            }
            steps {
                echo "Building image"
                // sh "podman build -t jenkins-nginx-test-image ."
            }

            
        }
        stage('Running Docker Image') { 
            steps {
                sh "cat index.html"
            }
        }

        stage('Testing Docker Image') { 
            steps {
                sh "cat index.html"
            }
        }
    }
    post {
        always{
            echo "Pipleline finished..."
        }
        success{
            echo "Pipleline finished successfully..."
        }
        failure{
            echo "Pipleline failure..."
        }
    }
}